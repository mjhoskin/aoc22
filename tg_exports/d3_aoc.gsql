CREATE GRAPH aoc()
CREATE SCHEMA_CHANGE JOB schema_change_job_AddExportedLocalVETypes_JT8B8XV85X78MVIO FOR GRAPH aoc { 
  ADD VERTEX elf(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX pouch(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX item(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD UNDIRECTED EDGE contains(FROM pouch, TO item);
  ADD UNDIRECTED EDGE has(FROM elf, TO pouch);
}
RUN SCHEMA_CHANGE JOB schema_change_job_AddExportedLocalVETypes_JT8B8XV85X78MVIO
DROP JOB schema_change_job_AddExportedLocalVETypes_JT8B8XV85X78MVIO
set exit_on_error = "false"
CREATE LOADING JOB load_job_d3_txt_1670100089841 FOR GRAPH aoc {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX elf VALUES($0) USING SEPARATOR=" ", HEADER="false", EOL="\n";
      LOAD MyDataSource TO VERTEX pouch VALUES($1) USING SEPARATOR=" ", HEADER="false", EOL="\n";
      LOAD MyDataSource TO VERTEX item VALUES($2) USING SEPARATOR=" ", HEADER="false", EOL="\n";
      LOAD MyDataSource TO EDGE has VALUES($0, $1) USING SEPARATOR=" ", HEADER="false", EOL="\n";
      LOAD MyDataSource TO EDGE contains VALUES($1, $2) USING SEPARATOR=" ", HEADER="false", EOL="\n";
    }

set exit_on_error = "true"
set exit_on_error = "false"
CREATE QUERY problematic_bags(/* Parameters here */) FOR GRAPH aoc { 
  /* Write query logic here */ 
    
  #SetAccum<STRING> @elves_items;
  BagAccum<VERTEX<item>> @dupe;
  
  MapAccum<VERTEX<pouch>, BagAccum<VERTEX<item>>> @elves_items;
  SetAccum<STRING> @complete_items;
  ListAccum<VERTEX<pouch>> @pouches;    
  SumAccum<INT> @@total_priority;
  MaxAccum<INT> @group;
  
  MapAccum<STRING, INT> @@priority;
  @@priority += ("a" -> 1);
  @@priority += ("b" -> 2);
  @@priority += ("c" -> 3);
  @@priority += ("d" -> 4);
  @@priority += ("e" -> 5);
  @@priority += ("f" -> 6);
  @@priority += ("g" -> 7);
  @@priority += ("h" -> 8);
  @@priority += ("i" -> 9);
  @@priority += ("j" -> 10);
  @@priority += ("k" -> 11);
  @@priority += ("l" -> 12);
  @@priority += ("m" -> 13);
  @@priority += ("n" -> 14);
  @@priority += ("o" -> 15);
  @@priority += ("p" -> 16);
  @@priority += ("q" -> 17);
  @@priority += ("r" -> 18);
  @@priority += ("s" -> 19);
  @@priority += ("t" -> 20);
  @@priority += ("u" -> 21);
  @@priority += ("v" -> 22);
  @@priority += ("w" -> 23);
  @@priority += ("x" -> 24);
  @@priority += ("y" -> 25);
  @@priority += ("z" -> 26);
  @@priority += ("A" -> 27);
  @@priority += ("B" -> 28);
  @@priority += ("C" -> 29);
  @@priority += ("D" -> 30);
  @@priority += ("E" -> 31);
  @@priority += ("F" -> 32);
  @@priority += ("G" -> 33);
  @@priority += ("H" -> 34);
  @@priority += ("I" -> 35);
  @@priority += ("J" -> 36);
  @@priority += ("K" -> 37);
  @@priority += ("L" -> 38);
  @@priority += ("M" -> 39);
  @@priority += ("N" -> 40);
  @@priority += ("O" -> 41);
  @@priority += ("P" -> 42);
  @@priority += ("Q" -> 43);
  @@priority += ("R" -> 44);
  @@priority += ("S" -> 45);
  @@priority += ("T" -> 46);
  @@priority += ("U" -> 47);
  @@priority += ("V" -> 48);
  @@priority += ("W" -> 49);
  @@priority += ("X" -> 50);
  @@priority += ("Y" -> 51);
  @@priority += ("Z" -> 52);
  
  __ = SELECT e FROM elf:e - () - pouch:p ACCUM e.@pouches += p;

  elves = 
    SELECT e 
    FROM elf:e - () - pouch:p - () - item:i 
    ACCUM
      e.@elves_items += (p -> i),
      e.@complete_items += i.id #added here to use in part 2
    POST-ACCUM 
      e.@dupe = e.@elves_items.get(e.@pouches.get(0)) INTERSECT e.@elves_items.get(e.@pouches.get(1)),
  
      FOREACH value in e.@dupe DO @@total_priority += @@priority.get(value.id) END;

  
  PRINT @@total_priority;
      
  ### PART 2
 
  # regroup! 
  elves = SELECT e FROM elf:e POST-ACCUM e.@group = floor(str_to_int(e.id) / 3); 
  
  # and we'll traverse from the items this time - want items that exist across the groups
  SetAccum<STRING> @owners;
  MapAccum<VERTEX<item>, MapAccum<INT, INT>> @@owners;
  SumAccum<INT> @@secondary_total_priority;
  __ = SELECT i FROM item:i - () - pouch - () - elf:e 
       ACCUM i.@owners += (e.id),
             @@owners += (i -> (e.@group -> 1))
       POST-ACCUM 
             FOREACH (grp, ncount) in @@owners.get(i) 
             DO IF ncount == 3 
                THEN @@secondary_total_priority += @@priority.get(i.id)
                END 
             END; 
  
 /* elves = SELECT e 
          FROM elf:e - () - pouch - () - item:i - () - pouch - () - elf:g 
          WHERE e.@group == g.@group   
  */
  PRINT @@owners;
  PRINT elves;
  PRINT @@secondary_total_priority;
  
}
set exit_on_error = "true"
